[{"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/index.js":"1","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/App.js":"2","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/alert/AlertProvider.js":"3","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/reportWebVitals.js":"4","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/index.js":"5","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/ActorForm.js":"6","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/SensorForm.js":"7","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/KettleForm.js":"8","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/mashprofile/StepForm.js":"9","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/PrivateRoute.js":"10","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/Dashboard.js":"11","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/Menu.js":"12","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/websocket.js":"13","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/actorapi.js":"14","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/sensorapi.js":"15","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/kettleapi.js":"16","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/mashprofile/index.js":"17","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/index.js":"18","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/plugins/index.js":"19","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/about/index.js":"20","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/settings/index.js":"21","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/mashprofile/SortButton.js":"22","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/SensorTable.js":"23","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/SensorValue.js":"24","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/DeleteDialog.js":"25","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/configapi.js":"26","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/KettleTable.js":"27","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/ActorTable.js":"28","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/Header.js":"29","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/mashprofile/BasicDataForm.js":"30","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/StepStateChip.js":"31","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/MashControl.js":"32","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/stepapi.js":"33","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/DashboardContext.js":"34","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorValue.js":"35","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorSwitch.js":"36","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/Title.js":"37","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorButton.js":"38","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/StepTypeSelect.js":"39","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/PropsEdit.js":"40","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/SensorSelect.js":"41","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/LogicSelect.js":"42","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorSelect.js":"43","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/GlobalKeyPress.js":"44","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/Elements.js":"45","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/config.js":"46","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Path.js":"47","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/DashboardWidgetList.js":"48","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/DashboardLayer.js":"49","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/DasboardToolbar.js":"50","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/KettleSelect.js":"51","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/dashboardapi.js":"52","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/CustomSVG.js":"53","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Steps.js":"54","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Led.js":"55","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/KettleControl.js":"56","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/TargetTemp.js":"57","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Chart.js":"58","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/WidgetSelect.js":"59","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/SensorData.js":"60","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/SelectInput.js":"61","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Button.js":"62","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/SensorTypeSelect.js":"63","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorTypeSelect.js":"64","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Text.js":"65"},{"size":1433,"mtime":1611957320211,"results":"66","hashOfConfig":"67"},{"size":6744,"mtime":1611406794747,"results":"68","hashOfConfig":"67"},{"size":1572,"mtime":1611436931737,"results":"69","hashOfConfig":"67"},{"size":362,"mtime":1608015606218,"results":"70","hashOfConfig":"67"},{"size":6797,"mtime":1612568400167,"results":"71","hashOfConfig":"67"},{"size":4132,"mtime":1611409232756,"results":"72","hashOfConfig":"67"},{"size":4079,"mtime":1611409225874,"results":"73","hashOfConfig":"67"},{"size":4903,"mtime":1611409148373,"results":"74","hashOfConfig":"67"},{"size":4626,"mtime":1612639672555,"results":"75","hashOfConfig":"67"},{"size":1315,"mtime":1610190299858,"results":"76","hashOfConfig":"67"},{"size":293,"mtime":1610103240163,"results":"77","hashOfConfig":"67"},{"size":1660,"mtime":1610440496791,"results":"78","hashOfConfig":"67"},{"size":1109,"mtime":1611013853629,"results":"79","hashOfConfig":"67"},{"size":1868,"mtime":1610233373529,"results":"80","hashOfConfig":"67"},{"size":870,"mtime":1611352703020,"results":"81","hashOfConfig":"67"},{"size":2203,"mtime":1611957164939,"results":"82","hashOfConfig":"67"},{"size":4946,"mtime":1612567060864,"results":"83","hashOfConfig":"67"},{"size":2570,"mtime":1611013090775,"results":"84","hashOfConfig":"67"},{"size":3598,"mtime":1610307529631,"results":"85","hashOfConfig":"67"},{"size":2806,"mtime":1612568344720,"results":"86","hashOfConfig":"67"},{"size":4934,"mtime":1611399414268,"results":"87","hashOfConfig":"67"},{"size":1871,"mtime":1611696509031,"results":"88","hashOfConfig":"67"},{"size":2904,"mtime":1610220782282,"results":"89","hashOfConfig":"67"},{"size":235,"mtime":1611928864722,"results":"90","hashOfConfig":"67"},{"size":1768,"mtime":1610229714595,"results":"91","hashOfConfig":"67"},{"size":625,"mtime":1610285830057,"results":"92","hashOfConfig":"67"},{"size":3739,"mtime":1612300068860,"results":"93","hashOfConfig":"67"},{"size":3202,"mtime":1610221487566,"results":"94","hashOfConfig":"67"},{"size":549,"mtime":1611013042244,"results":"95","hashOfConfig":"67"},{"size":883,"mtime":1611013335031,"results":"96","hashOfConfig":"67"},{"size":807,"mtime":1611697108416,"results":"97","hashOfConfig":"67"},{"size":2490,"mtime":1611957509133,"results":"98","hashOfConfig":"67"},{"size":2695,"mtime":1611785022232,"results":"99","hashOfConfig":"67"},{"size":8006,"mtime":1612390834729,"results":"100","hashOfConfig":"67"},{"size":337,"mtime":1612300092620,"results":"101","hashOfConfig":"67"},{"size":449,"mtime":1611353384359,"results":"102","hashOfConfig":"67"},{"size":342,"mtime":1611010760117,"results":"103","hashOfConfig":"67"},{"size":374,"mtime":1610221342620,"results":"104","hashOfConfig":"67"},{"size":867,"mtime":1611441255522,"results":"105","hashOfConfig":"67"},{"size":2189,"mtime":1611010180759,"results":"106","hashOfConfig":"67"},{"size":873,"mtime":1611441088071,"results":"107","hashOfConfig":"67"},{"size":811,"mtime":1611351869933,"results":"108","hashOfConfig":"67"},{"size":842,"mtime":1610146066890,"results":"109","hashOfConfig":"67"},{"size":1097,"mtime":1612390571036,"results":"110","hashOfConfig":"67"},{"size":2062,"mtime":1612131646077,"results":"111","hashOfConfig":"67"},{"size":2843,"mtime":1612369399303,"results":"112","hashOfConfig":"67"},{"size":5530,"mtime":1612392603224,"results":"113","hashOfConfig":"67"},{"size":1298,"mtime":1612134233022,"results":"114","hashOfConfig":"67"},{"size":7644,"mtime":1612391054355,"results":"115","hashOfConfig":"67"},{"size":806,"mtime":1611438161519,"results":"116","hashOfConfig":"67"},{"size":845,"mtime":1610230752770,"results":"117","hashOfConfig":"67"},{"size":1175,"mtime":1612367902906,"results":"118","hashOfConfig":"67"},{"size":440,"mtime":1612390099884,"results":"119","hashOfConfig":"67"},{"size":4292,"mtime":1612390138640,"results":"120","hashOfConfig":"67"},{"size":440,"mtime":1611524156182,"results":"121","hashOfConfig":"67"},{"size":4326,"mtime":1611959658764,"results":"122","hashOfConfig":"67"},{"size":525,"mtime":1611932271817,"results":"123","hashOfConfig":"67"},{"size":1417,"mtime":1610229088770,"results":"124","hashOfConfig":"67"},{"size":830,"mtime":1612370315152,"results":"125","hashOfConfig":"67"},{"size":487,"mtime":1612389882133,"results":"126","hashOfConfig":"67"},{"size":816,"mtime":1611877534161,"results":"127","hashOfConfig":"67"},{"size":1202,"mtime":1611955998016,"results":"128","hashOfConfig":"67"},{"size":823,"mtime":1611441223647,"results":"129","hashOfConfig":"67"},{"size":841,"mtime":1611352474121,"results":"130","hashOfConfig":"67"},{"size":387,"mtime":1610110965797,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"1gc386c",{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"134"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"134"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"134"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"134"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"134"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"134"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"134"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"134"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"134"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"134"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"134"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"134"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"134"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"134"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"134"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"134"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"134"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"134"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"134"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"134"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"134"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"134"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"134"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"134"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"134"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"134"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"134"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"134"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/index.js",[],["291","292"],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/App.js",["293"],"import { Container } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Badge from \"@material-ui/core/Badge\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport About from \"./components/about\";\nimport Dashboard2 from \"./components/dashboard/Dashboard\";\nimport Hardware from \"./components/hardware\";\nimport ActorForm from \"./components/hardware/ActorForm\";\nimport KettleForm from \"./components/hardware/KettleForm\";\nimport SensorForm from \"./components/hardware/SensorForm\";\nimport Plugins from \"./components/plugins\";\nimport Recipe from \"./components/mashprofile\";\nimport Settings from \"./components/settings\";\nimport Menu from \"./components/util/Menu\";\nimport PrivateRoute from \"./components/util/PrivateRoute\";\nimport logo from \"./images/cbpi_no_border.png\";\nimport StepForm from \"./components/mashprofile/StepForm\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: \"none\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n  dashoard: {\n    data: theme.mixins.toolbar,\n  },\n  snack: {\n    position: \"absolute\",\n    bottom: 10,\n    right: 30,\n    \"& > * + *\": {\n      marginTop: theme.spacing(1),\n    },\n  },\n}));\n\nconst App2 = () => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Router>\n        <Switch>\n          <PrivateRoute path=\"/\">\n            <AppBar position=\"absolute\" className={classes.appBar}>\n              <Toolbar className={classes.toolbar}>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen} className={classes.menuButton}>\n                  <MenuIcon />\n                </IconButton>\n                <div className={classes.title} style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"row\" }}>\n                  <img width={30} src={logo} style={{ marginRight: 10 }} />\n                  <Typography component=\"h1\" variant=\"h4\" color=\"inherit\" noWrap>\n                    CraftBeerPi 4.0\n                  </Typography>\n                </div>\n                <IconButton color=\"inherit\">\n                  <Badge badgeContent={4} color=\"secondary\">\n                    <NotificationsIcon />\n                  </Badge>\n                </IconButton>\n              </Toolbar>\n            </AppBar>\n            <Drawer open={open} onClose={() => setOpen(false)}>\n              <Menu onClose={() => setOpen(false)} />\n            </Drawer>\n\n            <main className={classes.content}>\n              <div className={classes.appBarSpacer} />\n\n              <Container maxWidth={false} className={classes.container}>\n                <Route exact path=\"/\">\n                  <Dashboard2 />\n                </Route>\n\n                <Container maxWidth=\"lg\">\n                  <Route path=\"/plugins\">\n                    <Plugins />\n                  </Route>\n                  <Route path=\"/about\">\n                    <About />\n                  </Route>\n                  <Route path=\"/hardware\">\n                    <Hardware />\n                  </Route>\n                  <Route exact path=\"/kettle/:id\">\n                    <KettleForm />\n                  </Route>\n\n                  <Route exact path=\"/kettle\">\n                    <KettleForm />\n                  </Route>\n                  <Route exact path=\"/actor/:id\">\n                    <ActorForm />\n                  </Route>\n                  <Route exact path=\"/actor\">\n                    <ActorForm />\n                  </Route>\n                  <Route exact path=\"/sensor/:id\">\n                    <SensorForm />\n                  </Route>\n                  <Route exact path=\"/sensor\">\n                    <SensorForm />\n                  </Route>\n                  <Route exact path=\"/settings\">\n                    <Settings />\n                  </Route>\n                  <Route exact path=\"/recipe\">\n                    <Recipe/>\n                  </Route>\n                  <Route exact path=\"/step\">\n                    <StepForm/>\n                  </Route>\n                  <Route exact path=\"/step/:id\">\n                    <StepForm/>\n                  </Route>\n                </Container>\n                \n              </Container>\n            </main>\n          </PrivateRoute>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App2;\n\n/*\n\n*/\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/alert/AlertProvider.js",["294","295"],"import { makeStyles } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { createContext, useCallback, useContext, useMemo, useState } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    bottom: 10,\n    right: 30,\n    \"& > * + *\": {\n      marginTop: theme.spacing(1),\n    },\n  },\n}));\n\nexport const AlertContext = createContext({});\n\nexport const AlertProvider = ({ children }) => {\n  const classes = useStyles();\n  const [alerts, setAlerts] = useState([]);\n\n\n  const remove = useCallback((id) => {\n    setAlerts((value) => {\n      return value.filter((a) => a.id !== id);\n    });\n  }, []);\n\n  const show = useCallback((message = \"\", timeout = 5000) => {\n    const id = Math.random().toString(36).substr(2, 9);\n\n    const alert = {\n      id,\n      message,\n    };\n\n    const timerId = setTimeout(() => {\n      remove(id);\n    }, timeout);\n\n    setAlerts((state) => state.concat(alert));\n\n    return alert;\n  }, []);\n\n  const value = {\n    alerts,\n    show,\n  };\n\n  return (\n    <AlertContext.Provider value={value}>\n      {children}\n      <div className={classes.root}>\n        {alerts.map((a) =>\n        {\n            \n                return (\n                    <Alert key={a.id} >{a.message}</Alert>\n                  )\n        }\n        \n        \n        )}\n      </div>\n    </AlertContext.Provider>\n  );\n};\n\nexport const useAlert = (Context) => {\n  const alertContext = useContext(AlertContext);\n  const alert = useMemo(() => {\n    return alertContext;\n  }, [alertContext]);\n  return alert;\n};\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/reportWebVitals.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/index.js",["296","297","298","299","300","301","302","303","304","305","306","307"],"import { createContext, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport axios from \"axios\";\nimport CBPiWebSocket from \"./websocket\";\nimport { actorapi } from \"./actorapi\";\nimport { useEventCallback } from \"@material-ui/core\";\nimport { useAlert } from \"../alert/AlertProvider\";\nimport { kettleapi } from \"./kettleapi\";\nimport { sensorapi } from \"./sensorapi\";\nlet MQTTPattern = require(\"mqtt-pattern\");\n\nconst messageTypes = {\n  \"sensor/+id/data\": \"SENSOR_UPDATE\",\n  \"config/+id/update\": \"CONFIG_UPDATE\",\n  \"step/update\": \"STEP_UPDATE\",\n};\n\nexport const CBPiContext = createContext({});\n\nexport const CBPiProvider = ({ children }) => {\n  const [sensors, setSensors] = useState([]);\n  const [sensorData, setSensorData] = useState({});\n  const [config, setConfig] = useState({});\n  const [actors, setActors] = useState([]);\n  const [logic, setLogic] = useState([]);\n  const [actorTypes, setActorTypes] = useState([]);\n  const [sensorTypes, setSensorTypes] = useState([]);\n  const [kettle, setKettle] = useState([]);\n  const [mashProfile, setMashProfile] = useState([]);\n  const [mashBasic, setMashBasic] = useState([]);\n  const [stepTypes, setStepTypes] = useState([]);\n  const [auth, setAuth] = useState(null);\n  const [plugins, setPlugins] = useState([]);\n  const [temp, setTemp] = useState(\"\");\n  const [version, setVersion] = useState(\"---\")\n  const alert = useAlert();\n\n  const onMessage = (data) => {\n    console.log(\"WS\", data);\n    switch (data.topic) {\n      case \"kettleupdate\":\n        setKettle(() => data.data);\n        break;\n      case \"actorupdate\":\n        setActors(() => data.data);\n        break;\n      case \"sensorstate\":\n        setSensorData((current) => ({ ...current, [data.id]: data.value }));\n        break;\n      case \"step_update\":\n        setMashProfile(() => data.data);\n        break;\n      case \"sensorupdate\":\n        setSensors(() => data.data);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const processWebSocketMessage = (data) => {\n    switch (data.type) {\n      case \"SENSOR_UPDATE\":\n        let id = data.topic.variables.id;\n        let value = data.payload.value;\n        setSensorData({ ...sensorData, [id]: value });\n        break;\n      case \"CONFIG_UPDATE\":\n        let config_key = data.topic.variables.id;\n        let config_value = data.payload.value;\n        setConfig((current_config) => ({ ...current_config, [config_key]: { ...current_config[config_key], value: config_value } }));\n        break;\n      case \"STEP_UPDATE\":\n        let step_value = data.payload;\n        setMashProfile((c) => step_value.data);\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    const ws = new CBPiWebSocket(onMessage, alert);\n    ws.connect();\n\n    axios.get(\"/system/\").then((res) => {\n      const data = res.data;\n      console.dir(data);\n      setKettle(data.kettle.data);\n      setSensors(data.sensor.data);\n      setActors(data.actor.data);\n      setLogic(Object.values(data.kettle.types));\n      setActorTypes(Object.values(data.actor.types));\n      setSensorTypes(Object.values(data.sensor.types));\n      setMashProfile(data.step.profile);\n      setMashBasic(data.step.basic);\n      setConfig(data.config);\n      setVersion(data.version);\n      setStepTypes(Object.values(data.step.types));\n      setAuth(true);\n    });\n  }, []);\n\n  // Step API\n  const get_step_by_id = (id) => mashProfile.find((item) => item.id === id);\n  const add_kettle = (data, onSuccess = () => {}, onError = () => {}) => kettleapi.add(data, onSuccess, onError);\n  const update_kettle = (id, data, onSuccess = () => {}, onError = () => {}) => kettleapi.save(id, data, onSuccess, onError);\n  const delete_kettle = (id, onSuccess = () => {}, onError = () => {}) => kettleapi.remove(id, onSuccess, onError);\n  const target_temp_kettle = useEventCallback((id, temp) => kettleapi.target_temp(id, temp), []);\n  const toggle_logic = useEventCallback((id) => kettleapi.toggle(id), []);\n\n  const add_actor = (data, onSuccess = () => {}, onError = () => {}) => actorapi.add(data, onSuccess, onError);\n  const update_actor = (id, data, onSuccess = () => {}, onError = () => {}) => actorapi.save(id, data, onSuccess, onError);\n  const delete_actor = (id, onSuccess = () => {}, onError = () => {}) => actorapi.remove(id, onSuccess, onError);\n  const get_actor_by_id = (id) => actors.find((item) => item.id === id);\n\n  const toggle_actor = useEventCallback((id) => {\n    const actor = get_actor_by_id(id);\n    if (!actor) return;\n    if (actor.state === false) {\n      actorapi.on(id, (data) => setActors((current_actors) => current_actors.map((item, index) => (item.id === id ? { ...item, state: true } : item))));\n    } else {\n      actorapi.off(id, (data) => setActors((current_actors) => current_actors.map((item, index) => (item.id === id ? { ...item, state: false } : item))));\n    }\n  }, []);\n\n  const add_sensor = (data, onSuccess = () => {}, onError = () => {}) => sensorapi.add(data, onSuccess, onError);\n  const update_sensor = (id, data, onSuccess = () => {}, onError = () => {}) => sensorapi.save(id, data, onSuccess, onError);\n  const delete_sensor = (id, onSuccess = () => {}, onError = () => {}) => sensorapi.remove(id, onSuccess, onError);\n\n  const get_sensor_by_id = (id) => sensors.find((item) => item.id === id);\n\n  const value = {\n    state: { sensors, version, actors, logic, kettle, auth, plugins, temp, sensorData, actorTypes, sensorTypes, config, mashProfile, mashBasic, stepTypes },\n    actions: {\n      delete_kettle,\n      add_kettle,\n      target_temp_kettle,\n      toggle_logic,\n      update_kettle,\n      add_actor,\n      update_actor,\n      delete_actor,\n      toggle_actor,\n      get_actor_by_id,\n      add_sensor,\n      update_sensor,\n      delete_sensor,\n      get_sensor_by_id,\n      get_step_by_id,\n    },\n  };\n\n  return <CBPiContext.Provider value={value}>{children}</CBPiContext.Provider>;\n};\n\nexport const useCBPi = (Context) => {\n  const { state, actions } = useContext(CBPiContext);\n  const value = useMemo(() => {\n    return { state, version: state.version, kettle: state.kettle, actor: state.actors, sensor: state.sensors, config: state.config, actions };\n  }, [ state ]);\n  return value;\n};\n\nexport const useSensor = (id) => {\n  const { sensor, state } = useCBPi();\n  const value = useMemo(() => {\n    return sensor.find((item) => item.id === id);\n  }, [{ state }]);\n  return value;\n};\n\nexport const useKettle = (id) => {\n  const { kettle } = useCBPi();\n  const value = useMemo(() => {\n    return kettle.find((item) => item.id === id);\n  }, [kettle]);\n  return value;\n};\n\nexport const useActor = (id = null) => {\n  const { actor } = useCBPi();\n  const value = useMemo(() => {\n    return id === null ? actor : actor.find((item) => item.id === id);\n  }, [actor]);\n  return value;\n};\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/ActorForm.js",["308"],"import { Breadcrumbs, Divider, Link, Paper, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCBPi } from \"../data\";\nimport ActorTypeSelect from \"../util/ActorTypeSelect\";\nimport PropsEdit from \"../util/PropsEdit\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst ActorForm = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const { id } = useParams();\n  const { actor, state, actions } = useCBPi();\n  const [propsConfig, setPropsConfig] = useState(null);\n  const [props, setProps] = useState({})\n\n  useEffect(() => {\n    if (id) {\n      const item = actor.find((item) => item.id === id);\n      if (item) {\n        setName(item.name);\n        setType(item.type);\n        setProps(item.props)\n        if (item.type) {\n          setPropsConfig(state.actorTypes.find((i) => i.name === item.type)?.properties);\n        }\n      }\n    }\n  }, []);\n\n  const save = () => {\n    const data = {\n      name,\n      type,\n      props,\n      config: {},\n    };\n\n    if (id) {\n      actions.update_actor(id, data, () => history.push(\"/hardware\"));\n    } else {\n      actions.add_actor(data, () => history.push(\"/hardware\"));\n    }\n  };\n\n  const onChangeProps = (name, value) => {\n    console.log(name, value);\n    setProps({...props, [name]: value})\n  };\n\n  const onChangeType = (e) =>  {\n    const value = e.target.value\n    setType(value)\n    if (value) {\n      setPropsConfig(state.actorTypes.find((i) => i.name === value)?.properties);\n    }\n  }\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Actor Config\n      </Typography>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/hardware\");\n          }}\n        >\n          Actor\n        </Link>\n        <Typography color=\"textPrimary\">{name}</Typography>\n      </Breadcrumbs>\n\n      <Divider />\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <TextField required id=\"name\" label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <ActorTypeSelect label=\"Type\" value={type} onChange={onChangeType} />\n          </Grid>\n\n          <PropsEdit config={propsConfig} data={props} onChange={onChangeProps} />\n        </Grid>\n        <div className={classes.buttons}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              history.push(\"/hardware\");\n            }}\n            className={classes.button}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              save();\n            }}\n            className={classes.button}\n          >\n            Save\n          </Button>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nexport default ActorForm;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/SensorForm.js",["309"],"import { Breadcrumbs, Divider, Link, Paper, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCBPi } from \"../data\";\nimport PropsEdit from \"../util/PropsEdit\";\nimport SensorTypeSelect from \"../util/SensorTypeSelect\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst SensorForm = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const { id } = useParams();\n  const { sensor, state, actions } = useCBPi();\n  const [propsConfig, setPropsConfig] = useState(null);\n  const [props, setProps] = useState({});\n\n  useEffect(() => {\n    if (id) {\n      const item = sensor.find((item) => item.id === id);\n      if (item) {\n        setName(item.name);\n        setType(item.type);\n        setProps(item.props);\n        if (item.type) {\n          setPropsConfig(state.sensorTypes.find((i) => i.name === item.type)?.properties);\n        }\n      }\n    }\n  }, []);\n\n  const save = () => {\n    const data = { name, type, props };\n\n    if (id) {\n      actions.update_sensor(id, data, () => history.push(\"/hardware\"));\n    } else {\n      actions.add_sensor(data, () => history.push(\"/hardware\"));\n    }\n  };\n\n  const onChangeProps = (name, value) => {\n    setProps({ ...props, [name]: value });\n  };\n\n  const onChangeType = (e) =>  {\n    const value = e.target.value\n    setType(value)\n    if (value) {\n      setPropsConfig(state.sensorTypes.find((i) => i.name === value)?.properties);\n    }\n  }\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Sensor Config\n      </Typography>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/hardware\");\n          }}\n        >\n          Sensor\n        </Link>\n        <Typography color=\"textPrimary\">{name}</Typography>\n      </Breadcrumbs>\n\n      <Divider />\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <TextField required id=\"name\" label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <SensorTypeSelect label=\"Type\" value={type} onChange={onChangeType} />\n          </Grid>\n\n          <PropsEdit config={propsConfig} data={props} onChange={onChangeProps} />\n        </Grid>\n        <div className={classes.buttons}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              history.push(\"/hardware\");\n            }}\n            className={classes.button}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              save();\n            }}\n            className={classes.button}\n          >\n            Save\n          </Button>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nexport default SensorForm;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/KettleForm.js",["310"],"import { Breadcrumbs, Divider, Link, Paper, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCBPi } from \"../data\";\nimport ActorSelect from \"../util/ActorSelect\";\nimport LogicSelect from \"../util/LogicSelect\";\nimport PropsEdit from \"../util/PropsEdit\";\nimport SensorSelect from \"../util/SensorSelect\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst KettleForm = () => {\n  \n  const history = useHistory();\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const { id } = useParams();\n  const [heater, setHeater] = useState(\"\");\n  const [agitator, setAgitator] = useState(\"\");\n  const [sensor, setSensor] = useState(\"\");\n  const { kettle, state, actions } = useCBPi();\n  const [propsConfig, setPropsConfig] = useState(null);\n  const [props, setProps] = useState({});\n\n  const save = () => {\n    const data = {\n      name,\n      sensor,\n      heater,\n      agitator,\n      type,\n      props,\n    };\n\n    if (id) {\n      actions.update_kettle(id, data, () => history.push(\"/hardware\"));\n    } else {\n      actions.add_kettle(data, () => history.push(\"/hardware\"));\n    }\n  };\n\n  useEffect(() => {\n    if (id) {\n      const item = kettle.find((item) => item.id === id);\n      if (item) {\n        setName(item.name);\n        setHeater(item.heater);\n        setAgitator(item.agitator);\n        setType(item.type);\n        setSensor(item.sensor);\n        setProps(item.props);\n        if (item.type) {\n          setPropsConfig(state.logic.find((i) => i.name === item.type)?.properties);\n        }\n      }\n    }\n  }, []);\n\n  const onChangeProps = (name, value) => {\n    setProps({ ...props, [name]: value });\n  };\n\n  const onChangeType = (e) =>  {\n    const value = e.target.value\n    setType(value)\n    if (value) {\n      setPropsConfig(state.logic.find((i) => i.name === value)?.properties);\n    }\n  }\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Kettle Config\n      </Typography>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/hardware\");\n          }}\n        >\n          Kettle\n        </Link>\n        <Typography color=\"textPrimary\">{name}</Typography>\n      </Breadcrumbs>\n\n      <Divider />\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <TextField required id=\"name\" label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <LogicSelect value={type} onChange={onChangeType} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <ActorSelect label=\"Heater\" value={heater} onChange={(e) => setHeater(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <ActorSelect label=\"Agitator\" value={agitator} onChange={(e) => setAgitator(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <SensorSelect value={sensor} onChange={(e) => setSensor(e.target.value)} />\n          </Grid>\n          <PropsEdit config={propsConfig} data={props} onChange={onChangeProps} />\n        </Grid>\n        <div className={classes.buttons}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              history.push(\"/hardware\");\n            }}\n            className={classes.button}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              save();\n            }}\n            className={classes.button}\n          >\n            Save\n          </Button>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nexport default KettleForm;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/mashprofile/StepForm.js",["311","312"],"import { Breadcrumbs, Divider, Link, Paper, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useAlert } from \"../alert/AlertProvider\";\nimport { CBPiContext, useCBPi } from \"../data\";\nimport { stepapi } from \"../data/stepapi\";\nimport PropsEdit from \"../util/PropsEdit\";\nimport StepTypeSelct from \"../util/StepTypeSelect\";\n\nconst props = [\n  {\n    label: \"Parameter1\",\n    type: \"number\",\n    configurable: true,\n    description: \"\",\n    default_value: null,\n  },\n  {\n    label: \"Parameter2\",\n    type: \"text\",\n    configurable: true,\n    default_value: \"HALLO\",\n    description: \"\",\n  },\n];\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst StepForm = () => {\n  const history = useHistory();\n  const alert = useAlert();\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [props, setProps] = useState({})\n  const [propsConfig, setPropsConfig] = useState(null);\n  const { id } = useParams();\n  const { state } = useCBPi();\n\n  const { actions } = useContext(CBPiContext);\n\n  const save = () => {\n\n    \n    const data = {\n      name,\n      type,\n      props,\n    };\n\n    if (id) {\n      stepapi.save(id, data, (data) => {\n        alert.show(\"Step Saved\");\n        history.push(\"/recipe\");\n      });\n    } else {\n      stepapi.add(data, (data) => {\n        alert.show(\"Step added\");\n        history.push(\"/recipe\");\n      });\n    }\n  };\n\n  const onSelectType = (e) => {\n    const name = e.target.value;\n    setType(name);\n    const type2 = state.stepTypes.find((item) => item.name === name);\n    setPropsConfig(type2?.properties);\n  };\n\n  const onChangeProps = (name, value) => {\n    console.log(name, value);\n\n    setProps({...props, [name]: value})\n  };\n\n  useEffect(() => {\n    if (id) {\n      const k = actions.get_step_by_id(id);\n\n      if (k) {\n        setName(k.name);\n        setType(k.type);\n        setProps(k.props)\n        if (k.type) {\n          setPropsConfig(state.stepTypes.find((item) => item.name === k.type)?.properties);\n        }\n      }\n    }\n  }, []);\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Step Config\n      </Typography>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/recipe\");\n          }}\n        >\n          Mash Profile\n        </Link>\n        <Typography color=\"textPrimary\">{name}</Typography>\n      </Breadcrumbs>\n\n      <Divider />\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <TextField required id=\"name\" label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <StepTypeSelct value={type} onChange={onSelectType} />\n          </Grid>\n\n          <PropsEdit config={propsConfig} data={props} onChange={onChangeProps} />\n        </Grid>\n        <div className={classes.buttons}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              history.push(\"/recipe\");\n            }}\n            className={classes.button}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              save();\n            }}\n            className={classes.button}\n          >\n            Save\n          </Button>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nexport default StepForm;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/PrivateRoute.js",["313","314"],"import { Redirect } from \"react-router-dom\";\nimport React, { useContext } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Box from \"@material-ui/core/Box\";\nimport logo from \"../../images/cbpi_pattern.png\";\nimport { ReactComponent as CBPiSVG } from \"../../images/CBPi_logo.svg\";\n\n\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CBPiContext } from \"../data\";\n\nconst PrivateRoute = ({ children, ...rest }) => {\n  const { state } = useContext(CBPiContext);\n\n  if (state.auth === null) {\n    //if (true) {\n    return (\n      <Box className=\"loadingbg\" width=\"100%\" height=\"100vh\" display=\"flex\" justifyContent=\"center\" flexDirection=\"column\">\n        <Box display=\"flex\" justifyContent=\"center\">\n          <CBPiSVG/>\n        </Box>\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n          Please wait\n        </Typography>\n      </Box>\n    );\n  }\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        state.auth ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/about\",\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/Dashboard.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/Menu.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/websocket.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/actorapi.js",["315"],"import axios from \"axios\";\nimport { useAlert } from \"../alert/AlertProvider\";\n\nconst save = (id, data, callback_susscess = () => {}, callback_failed = () => {}) => {\n  axios\n    .put(\"/actor/\" + id, data)\n    .then(function (response) {\n      console.log(response);\n      callback_susscess(response.data);\n    })\n    .catch(function (error) {\n      callback_failed();\n    });\n};\n\nconst add = (data, callback_susscess = () => {}, callback_failed = () => {}) => {\n  \n  axios\n    .post(\"/actor/\", data)\n    .then(function (response) {\n      console.log(response);\n      \n      callback_susscess(response.data);\n    })\n    .catch(function (error) {\n      callback_failed();\n    });\n};\n\nconst remove = (id, callback_susscess = () => {}, callback_failed = () => {}) => {\n  axios\n    .delete(\"/actor/\"+ id)\n    .then(function (response) {\n      console.log(response);\n      callback_susscess();\n    })\n    .catch(function (error) {\n      callback_failed();\n    });\n};\n\nconst on = (id, callback_susscess = () => {}, callback_failed = () => {}) => {\n  axios\n    .post(\"/actor/\"+ id + \"/on\")\n    .then(function (response) {\n      \n      callback_susscess(response.data);\n    })\n    .catch(function (error) {\n      callback_failed();\n    });\n};\n\nconst off = (id, callback_susscess = () => {}, callback_failed = () => {}) => {\n  axios\n    .post(\"/actor/\"+ id + \"/off\")\n    .then(function (response) {\n      \n      callback_susscess(response.data);\n    })\n    .catch(function (error) {\n      callback_failed();\n    });\n};\n\nconst toggle = (id, callback_susscess = () => {}, callback_failed = () => {}) => {\n  axios\n    .post(\"/actor/\"+ id + \"/toggle\")\n    .then(function (response) {\n      \n      callback_susscess(response.data);\n    })\n    .catch(function (error) {\n      callback_failed();\n    });\n};\n\n\nexport const actorapi = {\n  add,\n  remove,\n  save,\n  on, \n  off,\n  toggle,\n}","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/sensorapi.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/kettleapi.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/mashprofile/index.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/index.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/plugins/index.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/about/index.js",["316"],"import { Divider, Grid, Paper, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { version } from \"react\";\nimport logo from \"../../images/cbpi.png\";\nimport { useCBPi } from \"../data\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst About = () => {\n  const classes = useStyles();\n  const {state} = useCBPi()\n\n  return (\n    <div>\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{ marginTop: 10 }}>\n        <Grid item>\n          <Typography variant=\"h5\" gutterBottom>\n            About\n          </Typography>\n        </Grid>\n        <Grid item></Grid>\n      </Grid>\n      <Divider style={{ marginBottom: 10, marginTop: 10 }} />\n\n      <Grid container spacing={2} className={classes.root}>\n        <Grid item spacing={2} xs={12}>\n          <Paper style={{ padding: 10 }}>\n            This is CraftBeerPi Brewing Controller 4.0 (Version: {state.version})\n            <p>It's an Open Source Project founded in 2015. More than 7,000 passioned Homebrewers and commercial Craft Brewerys are using CraftBeerPi. It's an open Eco System.</p>\n            Website: http://www.CraftBeerPi.com <br />\n            GitHub: http://github.com/manuel83 <br />\n            Facebook: http://github.com/groups/craftbeerpi\n            <br />\n            <p>Cheers,</p>\n            <p> Manuel Fritsch</p>\n            <img width={30} src={logo} alt=\"Logo\" /> CraftBeerPi\n          </Paper>\n        </Grid>\n        <Grid item spacing={2} xs={12}>\n          <Paper style={{ padding: 10 }}>\n            <h3>Licnese</h3>\n            <p>GNU General Public License 3</p>\n          </Paper>\n        </Grid>\n        <Grid item spacing={2} xs={12}>\n          <Paper style={{ padding: 10 }}>\n            <h3>PayPal Donation</h3>\n            <p>CraftBeerPi is an free an open source project. If you like this software support this project with a donation.\n              The donation is used to buy hardware and software to build this product. \n            </p>\n            <form action=\"https://www.paypal.com/donate\" method=\"post\" target=\"_top\">\n        <input type=\"hidden\" name=\"hosted_button_id\" value=\"QA2DR6FKNF6VN\" />\n        <input\n          type=\"image\"\n          src=\"/paypal.png\"\n          border=\"0\"\n          width=\"200px\"\n          name=\"submit\"\n          title=\"PayPal - The safer, easier way to pay online!\"\n          alt=\"Donate with PayPal button\"\n        />\n        <img alt=\"\" border=\"0\" src=\"https://www.paypal.com/en_DE/i/scr/pixel.gif\" width=\"1\" height=\"1\" />\n      </form>\n          </Paper>\n        </Grid>\n        \n      </Grid>\n\n      \n    </div>\n  );\n};\n\nexport default About;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/settings/index.js",["317","318","319","320","321"],"import { Button, Container, Divider, IconButton, InputBase, InputLabel, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport React, { useEffect, useState } from \"react\";\nimport { useCBPi, useConfig } from \"../data\";\nimport { configapi } from \"../data/configapi\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport { useAlert } from \"../alert/AlertProvider\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n}));\n\nconst SelectBox = ({ options, value, onChange }) => {\n  return (\n    <>\n      <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={value} onChange={onChange}>\n        {options.map((item) => (\n          <MenuItem key={item.value} value={item.value}>\n            {item.label}\n          </MenuItem>\n        ))}\n      </Select>\n    </>\n  );\n};\n\nconst ConfigInput = ({ onChange, value, options }) => {\n  if (options) {\n    return <SelectBox options={options} value={value} onChange={onChange} />;\n  } else {\n    return <TextField onChange={onChange} value={value} />;\n  }\n};\n\nconst Settings = () => {\n  const {config: state } = useCBPi();\n  const [config, setConfig] = useState({});\n\n  const [filter, setFilter] = useState(\"\");\n  const classes = useStyles();\n  const alert = useAlert()\n  useEffect(() => {\n    setConfig({ ...state });\n  }, []);\n\n  const onChange = (field, e) => {\n    setConfig({ ...config, [field]: { ...config[field], changed: true, value: e.target.value } });\n  };\n\n  const save = () => {\n    Object.keys(config).map((key) => {\n      const parameter = config[key];\n      if (parameter.changed) {\n        configapi.update(key, parameter.value);\n        setConfig((curret_config) => ({ ...curret_config, [key]: { ...curret_config[key], changed: false } }));\n      }\n    });\n\n    alert.show(\"Config saved\")\n  };\n\n  const reset = () => {\n    setConfig({ ...state });\n    alert.show(\"Changes resetted\")\n  };\n\n  let data = config;\n\n  console.log(\"DATA\", data);\n\n  if (filter) {\n    //data = data.filter((item) => item.name.includes(filter));\n    data = Object.keys(data)\n      .filter((key) => key.includes(filter))\n      .reduce((obj, key) => {\n        obj[key] = data[key];\n        return obj;\n      }, {});\n  }\n\n  return (\n  <>\n      \n\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{ marginTop: 10 }}>\n        <Grid item>\n          <Typography variant=\"h5\" gutterBottom>\n            Settings\n          </Typography>\n        </Grid>\n        <Grid item>\n        <Paper component=\"form\" className={classes.root}>\n            <InputBase\n              className={classes.input}\n              value={filter}\n              onChange={(e) => {\n                setFilter(e.target.value);\n              }}\n              placeholder=\"Filter\"\n              inputProps={{ \"aria-label\": \"filter settings\" }}\n            />\n            <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n              <SearchIcon />\n            </IconButton>\n          </Paper>\n        </Grid>\n        <Grid item>\n        \n          <Button variant=\"contained\" color=\"secondary\" startIcon={<RotateLeftIcon />} onClick={reset}>\n            Reset\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={save}>\n            Save\n          </Button>\n        </Grid>\n      </Grid>\n      <Divider style={{ marginBottom: 10, marginTop: 10 }} />\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Parameter</TableCell>\n              <TableCell align=\"right\">Value</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {Object.keys(data).map((key) => (\n              <TableRow key={key} selected={config[key].changed}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {key}\n                  <div>\n                    <small>{config[key].description}</small>\n                  </div>\n                </TableCell>\n                <TableCell align=\"right\">\n                  <ConfigInput onChange={(e) => onChange(key, e)} value={config[key].value} options={config[key].options} />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n   </>\n  );\n};\n\nexport default Settings;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/mashprofile/SortButton.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/SensorTable.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/SensorValue.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/DeleteDialog.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/configapi.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/KettleTable.js",["322","323","324","325"],"import { makeStyles } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { CBPiContext, useCBPi } from '../data';\nimport { kettleapi } from '../data/kettleapi';\nimport ActorValue from '../util/ActorValue';\nimport DeleteDialog from '../util/DeleteDialog';\nimport SensorValue from '../util/SensorValue';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nconst KettleTable = () => {\n    const classes = useStyles();\n    const history = useHistory();\n    const { state, actions } = useCBPi()\n\n    const remove_callback = (id) => {\n        actions.delete_kettle(id)\n    }\n    return (\n        <>\n            <TableContainer >\n                <Table className={classes.table} dense table size=\"small\" aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Logic</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Heater</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Agitator</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Sensor</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Target Temp</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {state.kettle.map((row) => (\n                            <TableRow key={row.id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    \n                                        {row.name}\n                                    \n                                </TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">{row.type}</TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\"><ActorValue id={row.heater}/></TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\" ><ActorValue id={row.agitator}/></TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\"><SensorValue id={row.sensor}/></TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">{row.target_temp}</TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">\n                                    <DeleteDialog title=\"Delete Kettle\" message=\"Do you want to delete\" id={row.id} callback={remove_callback} />\n                                    <IconButton aria-label=\"delete\" size=\"small\" onClick={() => { history.push(\"/kettle/\"+row.id) }} >\n                                      <VisibilityIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n}\n\nexport default  KettleTable","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/hardware/ActorTable.js",["326","327"],"import { makeStyles } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { CBPiContext } from '../data';\nimport { actorapi } from '../data/actorapi';\nimport ActorButton from '../util/ActorButton';\nimport ActorSwitch from '../util/ActorSwitch';\nimport DeleteDialog from '../util/DeleteDialog';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nconst ActorTable = () => {\n    const classes = useStyles();\n    const history = useHistory();\n    const { state, actions } = useContext(CBPiContext);\n\n    \n    \n    const remove_callback = (id) => {\n        actorapi.remove(id)\n        actions.delete_actor(id)\n    }\n    return (\n        <>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} dense={true} table size=\"small\" aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Type</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">State</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {state.actors.map((row) => (\n                            <TableRow key={row.id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    \n                                        {row.name}\n                                \n                                </TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">{row.type}</TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\"><ActorSwitch id={row.id}/></TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">\n                                    <DeleteDialog title=\"Delete Actir\" message=\"Do you want to delete the Actor\" id={row.id} callback={remove_callback} />\n                                    <IconButton aria-label=\"delete\" size=\"small\" onClick={() => { history.push(\"/actor/\"+row.id) }} >\n                                      <VisibilityIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n}\n\nexport default  ActorTable","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/Header.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/mashprofile/BasicDataForm.js",["328"],"import { Button, TextField } from \"@material-ui/core\";\nimport { default as React, useEffect, useState } from \"react\";\nimport { useAlert } from \"../alert/AlertProvider\";\nimport { useCBPi } from \"../data\";\nimport { stepapi } from \"../data/stepapi\";\nimport Header from \"../util/Header\";\n\nconst MashBasicDataForm = () => {\n  const {state} = useCBPi()\n  const [name, setName]  = useState(\"\")\n  const alert = useAlert()\n  useEffect(()=> {\n    setName(state.mashBasic.name)\n  }, [])\n\n  const save = () => {\n    stepapi.save_basic({name}, ()=> {alert.show(\"Basic Data Saved\")})\n  }\n\n  return (\n    <>\n      <Header title=\"Basic Data\">\n          <Button  variant=\"contained\" color=\"primary\" onClick={save} >Save</Button>\n      </Header>\n      <TextField value={name} onChange={(e)=>setName(e.target.value)} required id=\"name\" label=\"Name\" />\n    </>\n  );\n};\n\nexport default MashBasicDataForm\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/StepStateChip.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/MashControl.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/stepapi.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/DashboardContext.js",["329","330","331","332"],"import { IconButton } from \"@material-ui/core\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport React, { createContext, useCallback, useContext, useEffect, useRef, useMemo, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"../../App.css\";\nimport { useAlert } from \"../alert/AlertProvider\";\nimport { dashboardapi } from \"../data/dashboardapi\";\nimport DashboardToolbar from \"./DasboardToolbar\";\nimport DashboardLayer from \"./DashboardLayer\";\nimport DashboardWidgetList from \"./DashboardWidgetList\";\nimport { DashboardContainer } from \"./Elements\";\nimport useKeyPress from \"./GlobalKeyPress\";\nimport { widget_list } from \"./widgets/config\";\nimport { Path } from \"./widgets/Path\";\n\nexport const DashboardContext = createContext({});\n\nexport const DashboardProvider = ({ children }) => {\n  const alert = useAlert();\n  const [selected, setSelected] = useState(null);\n  const [selectedPath, setSelectedPath] = useState(null);\n  const [current, setCurrent] = useState(\"INFO\");\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [elements, setElements] = useState({});\n  const [draggable, setDraggable] = useState(false);\n  const [pathes, setPathes] = useState([]);\n  const [widgets, setWidgets] = useState([])\n  const widget_dict = widget_list.reduce((a, x) => ({ ...a, [x.type]: x }), {});\n\n\n  const delelteKeyPressed = useKeyPress(8);\n\n  useEffect(() => {\n    if (selected && selected.type === \"P\") {\n      const data = [...pathes];\n      const index = data.findIndex((e) => e.id === selected.id);\n      data.splice(index, 1);\n      setPathes([...data]);\n    }\n    if (selected && selected.type === \"E\") {\n      let data2 = { ...elements };\n      delete data2[selected.id];\n      setElements(data2);\n      setSelected(null);\n    }\n  }, [delelteKeyPressed]);\n\n  const load = (width, height) => {\n    dashboardapi.get(1, (data) => {\n      const errors = [];\n      let data_model = data.elements.reduce((a, x) => {\n        if (x.type in widget_dict) {\n          return { ...a, [x.id]: { ...x, instance: <DashboardContainer key={x.id} id={x.id} type={widget_dict[x.type].component} /> } };\n        } else {\n          errors.push(\"Error can't find \" + x.type + \" Widget\");\n          return { ...a };\n        }\n      }, {});\n      setElements({ ...data_model });\n\n      let dm = data.pathes.map((v) => ({ ...v, instance: <Path key={v.id} id={v.id} coordinates={v.coordinates} condition={v.condition} max_x={width} max_y={height} /> }));\n      setPathes(dm);\n    });\n\n    dashboardapi.widgets((data)=>{\n      setWidgets(data)\n    })\n  };\n\n  const remove = (id) => {\n    let data2 = { ...elements };\n    delete data2[id];\n    setElements(data2);\n    setSelected(null);\n  };\n\n  const update_default_prop = (id, key, value) => {\n    const item = get_data(id);\n    item[key] = value;\n    setElements({ ...elements, [id]: item });\n  };\n\n  const update_prop = (id, key, value) => {\n    const item = get_data(id);\n    item.props[key] = value;\n    setElements({ ...elements, [id]: item });\n  };\n\n  const update_path_condition = (id, data) => {\n    const index = pathes.findIndex((e) => e.id === id);\n    const temp_pathes = [...pathes];\n    temp_pathes[index].condition = data;\n\n    setPathes([...temp_pathes]);\n  };\n\n  const update_path = (id, data) => {\n    const index = pathes.findIndex((e) => e.id === id);\n    const temp_pathes = [...pathes];\n    temp_pathes[index].coordinates = data;\n\n    setPathes([...temp_pathes]);\n  };\n\n  const add = (item) => {\n    const id = uuidv4();\n    var props = item.props.reduce((obj, item) => Object.assign(obj, { [item.name]: item.default }), {});\n    const model = {\n      id,\n      type: item.type,\n      props: props,\n      name: item.name,\n      x: 10,\n      y: 10,\n      instance: <DashboardContainer key={id} id={id} type={item.component} />,\n    };\n    setElements({ ...elements, [id]: model });\n  };\n\n  const clear = useCallback(() => {\n    dashboardapi.clear(1, () => {\n      console.log(\"CEAR\");\n      setElements((currentElements) => ({}));\n      setPathes((currentPathes) => []);\n    });\n  }, []);\n\n  const add_path = () => {\n    const id = uuidv4();\n    const data = [\n      [100, 10],\n      [100, 110],\n    ];\n    setPathes([...pathes, { id, path: data, instance: <Path id={id} coordinates={data} condition={null} max_x={width} max_y={height} /> }]);\n  };\n\n  const get_data = (id) => {\n    return elements[id];\n  };\n\n  const is_selected = (id) => {\n    return selected?.id === id;\n  };\n\n  const save = () => {\n    let e = Object.values(elements).map((value) => ({ id: value.id, name: value.name, x: value.x, y: value.y, type: value.type, props: { ...value.props } }));\n    let p = pathes.map((value) => ({ id: value.id, coordinates: value.coordinates, condition: value.condition }));\n    dashboardapi.save(1, { elements: e, pathes: p }, () => {\n      alert.show(\"Dashboard Saved\");\n    });\n  };\n\n  const value = {\n    state: {\n      current,\n      width,\n      height,\n      elements,\n      pathes,\n      selected,\n      widgets,\n      widget_list,\n      draggable,\n      selectedPath,\n    },\n    actions: {\n      setCurrent,\n      setWidth,\n      setHeight,\n      add,\n      add_path,\n      setSelected,\n      get_data,\n      is_selected,\n      clear,\n      remove,\n      update_default_prop,\n      update_prop,\n      update_path_condition,\n      setDraggable,\n      update_path,\n      load,\n      setSelectedPath,\n      save,\n    },\n  };\n\n  return <DashboardContext.Provider value={value}>{children}</DashboardContext.Provider>;\n};\n\nexport const Dashboard = ({ width, height }) => {\n  const parentRef = useRef(null);\n  const { actions, state } = useContext(DashboardContext);\n\n  useEffect(() => {\n    if (parentRef.current) {\n      let parentHeight = parentRef.current.offsetHeight;\n      let parentWidth = parentRef.current.offsetWidth;\n      actions.setWidth(parentWidth);\n      actions.setHeight(parentHeight);\n      actions.load(parentWidth, parentHeight);\n    }\n  }, [parentRef]);\n\n  return (\n    <div>\n      {state.draggable ? <DashboardToolbar /> : null}\n      <div style={{ display: \"flex\", flexDirection: \"row\", width: \"100%\" }}>\n        {state.draggable ? <DashboardWidgetList /> : null}\n        <div\n          onPointerDown={() => {\n            actions.setSelected((current) => null);\n            actions.setSelectedPath((current) => null);\n          }}\n          ref={parentRef}\n          style={{\n            position: \"relative\",\n            backgroundColor: \"#272227\",\n            width,\n            height,\n          }}\n        >\n          {Object.values(state.elements).map((value, index) => value.instance)}\n          <svg style={{ position: \"absolute\", pointerEvents: \"none\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n            {state.pathes.map((value) => value.instance)}\n          </svg>\n          <div style={{ position: \"absolute\", top: 0, right: 0 }}>\n            <IconButton onClick={() => actions.setDraggable(!state.draggable)}>{state.draggable ? <LockOpenIcon /> : <LockIcon />}</IconButton>\n          </div>\n        </div>\n        {state.draggable ? <DashboardLayer /> : null}\n      </div>\n    </div>\n  );\n};\n\nexport const useDraggable = () => {\n  const { state } = useContext(DashboardContext);\n  const value = useMemo(() => {\n    return state.draggable;\n  }, [state.draggable]);\n  return value;\n};\n\nexport const useModel = (id) => {\n  const { state } = useContext(DashboardContext);\n  const value = useMemo(() => {\n    return state.elements[id];\n  }, [state, id]);\n  return value;\n};\n\nexport const useSelected = (id) => {\n  const { state } = useContext(DashboardContext);\n  const value = useMemo(() => {\n    return state.selected?.id === id;\n  }, [ state.selected ]);\n  return value;\n};\n\nexport const useDashboard = (Context) => {\n  const { state, actions } = useContext(DashboardContext);\n  const value = useMemo(() => {\n    return { state, actions}\n  }, [ state ]);\n  return value;\n};\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorValue.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorSwitch.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/Title.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorButton.js",["333"],"import { Button } from \"@material-ui/core\";\nimport { useCBPi } from \"../data\";\n\n\n const ActorButton = ({label = \"Actor\", id, property=\"name\"}) => {\n    const { state, actions } = useCBPi()\n    const actor = state.actors.find(e => e.id === parseInt(id))\n    return actor ? (<Button>{actor.state ? \"ON\" : \"OFF\"}</Button>) : (<>Actor not found</>)\n}\n\nexport default ActorButton","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/StepTypeSelect.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/PropsEdit.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/SensorSelect.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/LogicSelect.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorSelect.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/GlobalKeyPress.js",["334"],"import { useState, useEffect } from \"react\";\n\nexport const isInputDOMNode = (e) => {\n  const target = e?.target;\n  return [\"INPUT\", \"SELECT\", \"TEXTAREA\", \"BUTTON\"].includes(target?.nodeName) || target?.hasAttribute(\"contenteditable\");\n};\n\nconst useKeyPress = (key) => {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  useEffect(() => {\n    const downHandler = (e) => {\n      if (!isInputDOMNode(e) && key === e.keyCode) {\n        setKeyPressed(() => true);\n      }\n    };\n\n    const upHandler = (e) => {\n      if (!isInputDOMNode(e) && key === e.keyCode) {\n        setKeyPressed(() => false);\n      }\n    };\n\n    const resetHandler = () => setKeyPressed(false);\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    window.addEventListener(\"blur\", resetHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n      window.removeEventListener(\"blur\", resetHandler);\n    };\n  }, [setKeyPressed]);\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/Elements.js",["335","336"],"import IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport React, { useContext, useState, useMemo} from \"react\";\nimport Draggable from \"react-draggable\";\nimport \"../../App.css\";\nimport \"../../led.css\";\nimport { DashboardContext } from \"./DashboardContext\";\n\nexport const DashboardContainer = ({ name, id, index, type }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected = actions.is_selected(id);\n  const model = actions.get_data(id);\n  const [x, setX] = useState(model.x);\n  const [y, setY] = useState(model.y);\n\n\n \n    \n\n  let inputStyle = { position: \"absolute\" };\n\n  if (selected === true) {\n    inputStyle = { ...inputStyle, borderRadius: 5, border: \"1px solid rgba(142, 250, 0, .5)\" };\n  }\n  const draggable = state.draggable;\n\n  const Widget = type;\n\n  \n  const handleDrag = (e, ui) => {\n    setX(x + ui.deltaX);\n    setY(y + ui.deltaY);\n    actions.update_default_prop(id, \"x\", x + ui.deltaX);\n    actions.update_default_prop(id, \"y\", y + ui.deltaY);\n  };\n\n  const select = (e) => {\n    if (!draggable) {\n      return;\n    }\n    e.stopPropagation();\n    actions.setSelected(()=>({ type: \"E\", id }));\n  };\n\n  const render_icons = () => {\n    if (selected) {\n      return (\n        <>\n          <div style={{ position: \"absolute\", top: -40, left: -40 }}>\n            <IconButton aria-label=\"delete\" color=\"primary\" variant=\"contained\" onPointerDown={() => actions.remove(id)}>\n              <DeleteIcon />\n            </IconButton>\n          </div>\n        </>\n      );\n    }\n  \n  };\n\n  return (\n    <Draggable disabled={!draggable} onDrag={handleDrag} bounds=\"parent\" grid={[5, 5]} defaultPosition={{ x, y }}>\n      <div onPointerDown={select} style={inputStyle}>\n\n        { typeof type === 'string' ? <div><img className=\"no-drag\" width={model.props?.width} height={model.props?.height}  src={type}/></div> :\n        <Widget id={id} width={model.props?.width} height={model.props?.height} />}\n        {render_icons()}\n      </div>\n    </Draggable>\n  );\n \n};\n\n//\n\n\n\n\n\n\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/config.js",["337"],"import KettleSVG from \"./svg/kettle.svg\";\nimport TankSVG from \"./svg/tank2.svg\";\nimport { Text } from \"./Text\";\nimport { DashboardButton } from \"./Button\";\nimport { SensorData } from \"./SensorData\";\nimport Chart from \"./Chart\";\nimport { TargetTemp } from \"./TargetTemp\";\nimport { Led } from \"./Led\";\nimport { KettleControl } from \"./KettleControl\";\nimport Steps from \"./Steps\";\nimport CustomSVG from \"./CustomSVG\";\n\nexport const widget_list = [\n  {\n    name: \"Kettle\",\n    type: \"Kettle\",\n    component: KettleSVG,\n    props: [\n      { name: \"width\", default: \"100\", type: \"text\", unit: \"px\" },\n      { name: \"heigth\", default: \"150\", type: \"text\", unit: \"px\" },\n    ],\n  },\n  {\n    name: \"Tank\",\n    type: \"Tank\",\n    component: TankSVG,\n    props: [\n      { name: \"width\", default: \"100\", type: \"text\", unit: \"px\" },\n      { name: \"heigth\", default: \"150\", type: \"text\", unit: \"px\" },\n    ],\n  },\n  {\n    name: \"Text\",\n    type: \"Text\",\n    component: Text,\n    props: [\n      { name: \"size\", default: \"10\", type: \"text\", unit: \"pt\" },\n      { name: \"color\", default: \"#fff\", type: \"text\" },\n    ],\n  },\n  {\n    name: \"TargetTemp\",\n    type: \"TargetTemp\",\n    component: TargetTemp,\n    props: [\n      { name: \"kettle\", default: \"1\", type: \"kettle\" },\n      { name: \"unit\", default: \"°\", type: \"text\" },\n      { name: \"size\", default: \"12\", type: \"text\" },\n      { name: \"color\", default: \"#fff\", type: \"text\" },\n    ],\n  },\n\n  {\n    name: \"Sensor Data\",\n    type: \"Sensor\",\n    component: SensorData,\n    props: [\n      { name: \"sensor\", default: \"\", type: \"sensor\" },\n      { name: \"unit\", default: \"°\", type: \"text\" },\n      { name: \"size\", default: \"12\", type: \"text\", unit: \"pt\" },\n      { name: \"color\", default: \"#fff\", type: \"text\" },\n    ],\n  },\n  {\n    name: \"Actor\",\n    type: \"ActorButton\",\n    component: DashboardButton,\n    props: [{ name: \"actor\", default: \"\", type: \"actor\" }],\n  },\n  {\n    name: \"Led\",\n    type: \"Led\",\n    component: Led,\n    props: [{ name: \"actor\", default: \"\", type: \"actor\" }],\n  },\n\n  {\n    name: \"Steps\",\n    type: \"Steps\",\n    component: Steps,\n    props: [{ name: \"width\", default: \"200\", type: \"text\", unit: \"px\" }],\n  },\n  {\n    name: \"CustomSVG\",\n    type: \"CustomSVG\",\n    component: CustomSVG,\n    props: [\n      { name: \"width\", default: \"100\", type: \"text\", unit:\"px\"  },\n      { name: \"name\", default: \"\", type: \"widget\" },\n    ],\n  },\n  {\n    name: \"KettleControl\",\n    type: \"KettleControl\",\n    component: KettleControl,\n    props: [\n      { name: \"kettle\", default: \"1\", type: \"kettle\" },\n      { name: \"orientation\", options: [\"horizontal\", \"vertical\"], default: \"\", type: \"select\" },\n    ],\n  },\n];\n\n/*\n{\n    name: \"Chart\",\n    type: \"Chart\",\n    component: Chart,\n    props: [{ name: \"width\", default: 100, type: \"text\" }, { name: \"height\", default: 100, type: \"text\" }],\n  },\n*/\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Path.js",["338"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { useActor } from \"../../data\";\nimport classNames from 'classnames';\nimport { DashboardContext } from \"../DashboardContext\";\n\nexport const Path = ({ id, coordinates, condition = null, stroke = 10, max_x = 400, max_y = 600 }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const actor = useActor();\n  const [data, setData] = useState(coordinates);\n  const [dragging, setDragging] = useState(false);\n  const [origin, setOrigin] = useState({ x: 0, y: 0 });\n  const [active, setActive] = useState(false);\n  const [flowLeft, setFlowLeft] = useState(false)\n  const [flowRight, setFlowRight] = useState(false)\n \n\n  useEffect(() => {\n    \n    const actor_cache = actor.reduce((obj, item) => {\n      obj[item.id] = item.state;\n      return obj;\n    }, {});\n\n    const p = state.pathes.find((e) => e.id === id);\n    if (!p.condition?.left || p.condition?.left.length === 0) {\n      setFlowLeft(false)\n    } else {\n      setFlowLeft(p.condition?.left.reduce((sum, next) => sum && actor_cache[next], true));\n    }\n\n    if (!p.condition?.right || p.condition?.right.length === 0) {\n      setFlowRight(false)\n    } else {\n      setFlowRight(p.condition?.right.reduce((sum, next) => sum && actor_cache[next], true));\n    }\n  }, [actor]);\n\n  const draggable = state.draggable;\n  const gen_path = () => {\n    let path_string = \"\";\n    for (const [index, value] of data.entries()) {\n      const [x, y] = value;\n      index === 0 ? (path_string += \"M \") : (path_string += \" L \");\n      path_string += x;\n      path_string += \" \";\n      path_string += y;\n    }\n    return path_string;\n  };\n\n  const add_point = (e, index, x, y) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const d2 = [...data.slice(0, index + 1), [x, y], ...data.slice(index + 1)];\n    setData([...d2]);\n  };\n\n  const remove_point = (index) => {\n    data.splice(index, 1);\n    setData([...data]);\n  };\n\n  const render_handles = () => {\n    const len = data.length;\n    let result = [];\n    for (const [index, value] of data.entries()) {\n      if (index < len - 1) {\n        const [x, y] = value;\n        const [next_x, next_y] = data[index + 1];\n        const x_point = (x + next_x) / 2;\n        const y_point = (y + next_y) / 2;\n        result.push(\n          <g>\n            <circle onPointerDown={(e) => add_point(e, index, x_point, y_point)} cx={x_point} cy={y_point} fillOpacity=\"0.4\" r={12} />\n            <text x={x_point} y={y_point} textAnchor=\"middle\" fontSize=\"20px\" fill=\"#fff\" alignmentBaseline=\"central\">\n              +\n            </text>\n          </g>\n        );\n      }\n    }\n    return result;\n  };\n\n  const down = (e, index) => {\n    e.stopPropagation();\n    const el = e.target;\n    el.setPointerCapture(e.pointerId);\n    setOrigin({ x: data[index][0], y: data[index][1], clientX: e.clientX, clientY: e.clientY });\n    setDragging(true);\n  };\n\n  const up = (e, index) => {\n    e.stopPropagation();\n    setDragging(false);\n    actions.update_path(id, data);\n  };\n  const move = (e, index) => {\n    e.stopPropagation();\n    e.preventDefault();\n    if (dragging) {\n      const delta_x = e.clientX - origin.clientX;\n      const detal_y = e.clientY - origin.clientY;\n      const data2 = [...data[index]];\n\n      if (origin.x + delta_x < 0) {\n        data2[0] = 0;\n      } else if (origin.x + delta_x > max_x) {\n        data2[0] = max_x;\n      } else {\n        const t = origin.x + delta_x;\n        data2[0] = origin.x + delta_x - (t % 5);\n      }\n\n      if (origin.y + detal_y < 0) {\n        data2[1] = 0;\n      } else if (origin.y + detal_y > max_y) {\n        data2[1] = max_y;\n      } else {\n        const t2 = origin.y + detal_y;\n        data2[1] = origin.y + detal_y - (t2 % 5);\n      }\n      const d2 = [...data.slice(0, index), data2, ...data.slice(index + 1)];\n      setData([...d2]);\n    }\n  };\n\n  const handle = () => {\n    return data.map((data, index) => (\n      <g key={index}>\n        <circle cx={data[0]} cy={data[1]} r=\"5\" fill=\"#8efa00\" />\n        <circle\n          onDoubleClick={() => {\n            remove_point(index);\n          }}\n          onPointerMove={(e) => move(e, index)}\n          onPointerDown={(e) => down(e, index)}\n          onPointerUp={(e) => up(e, index)}\n          cx={data[0]}\n          cy={data[1]}\n          r=\"20 \"\n          fill=\"#8efa00\"\n          fillOpacity=\"0.1\"\n        />\n      </g>\n    ));\n  };\n\n  const select = (e) => {\n    if (!draggable) {\n      return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    setActive(!active);\n    //actions.setSelectedPath((current) => ({ type: \"P\", id }));\n    actions.setSelected((current) => ({ type: \"P\", id }));\n  };\n\n  const glow = () => (is_acktive() ? \"10%\" : \"0%\");\n  const is_acktive = () => actions.is_selected(id);\n  const animation = classNames({ flowLeft: flowLeft }, { flowRight: flowRight });\n  return (\n    <>\n      <g key={id}>\n        <path d={gen_path()} id=\"1\" fill=\"none\" stroke=\"#9A9A9A\" strokeLinejoin=\"round\" strokeWidth={stroke} pointerEvents=\"stroke\"></path>\n        <path className={animation} strokeLinejoin=\"round\" d={gen_path()} fill=\"none\" stroke=\"#4A4A4A\" strokeWidth={stroke - 2} strokeMiterlimit=\"10\" pointerEvents=\"stroke\"></path>\n        <path onPointerDown={(e) => select(e)} d={gen_path()} fill=\"none\" strokeOpacity={glow()} stroke=\"blue\" strokeLinejoin=\"round\" strokeWidth={stroke + 10} pointerEvents=\"stroke\"></path>\n        {is_acktive() ? handle() : \"\"}\n        {is_acktive() ? render_handles() : \"\"}\n      </g>\n    </>\n  );\n};\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/DashboardWidgetList.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/DashboardLayer.js",["339","340"],"import { Checkbox, InputAdornment, TextField, Typography } from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CropSquareIcon from \"@material-ui/icons/CropSquare\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useActor } from \"../data\";\nimport ActorSelect from \"../util/ActorSelect\";\nimport KettleSelect from \"../util/KettleSelect\";\nimport { SelectInput } from \"../util/SelectInput\";\nimport SensorSelect from \"../util/SensorSelect\";\nimport WidgetSelet from \"../util/WidgetSelect\";\nimport { DashboardContext } from \"./DashboardContext\";\nimport { widget_list } from \"./widgets/config\";\n\nconst DashboardLayerListItem = ({ item }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected = state.selected?.id === item.id;\n\n  return (\n    <ListItem button selected={selected} onClick={() => actions.setSelected(() => ({ type: \"E\", id: item.id }))}>\n      <ListItemIcon>\n        {selected ? <CheckBoxIcon color=\"primary\"/> : <CheckBoxOutlineBlankIcon/> }\n      </ListItemIcon>\n      <ListItemText primary={item.name} />\n    </ListItem>\n  );\n};\n\nconst DashboardLayerList = () => {\n  const { state } = useContext(DashboardContext);\n  const data = state.elements;\n\n  return (\n    <>\n      <div className=\"section_header\">Layer</div>\n      <div\n        style={{\n          padding: 5,\n          scrollbarColor: \"dark\",\n          maxHeight: 300,\n          overflowY: \"scroll\",\n        }}\n      >\n        <List component=\"nav\" disableGutters={true} dense aria-label=\"main mailbox folders\">\n          {Object.values(data).map((e, index) => (\n            <DashboardLayerListItem key={index} item={e} />\n          ))}\n        </List>\n      </div>\n    </>\n  );\n};\n\nconst DashboardLayer = () => {\n  return (\n    <div>\n      <div\n        onPointerDown={(e) => e.stopPropagation()}\n        className=\"box\"\n        style={{\n          width: 200,\n          overflow: \"hidden\",\n          fontFamily: \"JetBrains Mono\",\n          backgroundColor: \"#2c282e\",\n          color: \"#fff\",\n          borderRadius: 5,\n        }}\n      >\n        <div className=\"handle\">\n          <b>Settings</b>\n        </div>\n\n        <DashboardLayerList />\n\n        <DashboardProps />\n      </div>\n    </div>\n  );\n};\n\nconst PropsEditor = ({ data }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected_id = state.selected?.id;\n  if (!data || !selected_id) {\n    return \"\";\n  }\n  const type_spec = widget_list.find((item) => item.type === data.type);\n  const handlechange = (e, key) => {\n    actions.update_prop(selected_id, key, e.target.value);\n  };\n\n  return type_spec.props.map((s) => {\n    const unit = s.unit ? { endAdornment: <InputAdornment position=\"end\">{s.unit}</InputAdornment> } : {};\n\n    switch (s.type) {\n      case \"text\":\n        return <TextField InputProps={unit} label={s.name} key={s.name} fullWidth onChange={(e) => handlechange(e, s.name)} value={data.props[s.name]} />;\n      case \"select\":\n        return <SelectInput label={s.name} value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} options={s?.options || []} />;\n      case \"actor\":\n        return <ActorSelect value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} />;\n      case \"sensor\":\n        return <SensorSelect value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} />;\n      case \"kettle\":\n        return <KettleSelect value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} />;\n      case \"widget\":\n        return <WidgetSelet value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} />;\n\n      default:\n        return \"\";\n    }\n  });\n};\n\nconst PathSettingsItem = ({ item, checked, handleToggle }) => {\n  return (\n    <ListItem button onClick={handleToggle(item.id)}>\n      <ListItemIcon>\n        <Checkbox edge=\"start\" checked={checked.indexOf(item.id) !== -1} tabIndex={-1} color=\"primary\" disableRipple inputProps={{ \"aria-labelledby\": \"A\" }} />\n      </ListItemIcon>\n      <ListItemText primary={item.name} />\n    </ListItem>\n  );\n};\n\nconst PathSettings = () => {\n  const { state, actions } = useContext(DashboardContext);\n  const actor = useActor();\n  const selected_id = state.selected?.id;\n  const [selectedType, setSelectedType] = useState(null);\n  const [checked, setChecked] = React.useState([]);\n  const [checkedRight, setCheckedRight] = React.useState([]);\n\n  useEffect(() => {\n    const item = state.pathes.find((e) => e.id === selected_id);\n    setChecked((current) => item?.condition?.left || []);\n    setCheckedRight((current) => item?.condition?.right || []);\n  }, [selected_id]);\n\n  const handleToggle = (value, direction = \"left\") => () => {\n    if (direction === \"left\") {\n      const currentIndex = checked.indexOf(value);\n      const newChecked = [...checked];\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n      setChecked(newChecked);\n      actions.update_path_condition(selected_id, {left: newChecked, right: checkedRight});\n    } else {\n      const currentIndex = checkedRight.indexOf(value);\n      const newChecked = [...checkedRight];\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n      setCheckedRight(newChecked);\n      actions.update_path_condition(selected_id, {left: checked, right: newChecked});\n    }\n  };\n\n  useEffect(() => {\n    setSelectedType(() => state.selected?.type);\n  }, [state.selected]);\n\n  if (selectedType !== \"P\") {\n    return \"\";\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          padding: 5,\n          scrollbarColor: \"dark\",\n          maxHeight: 300,\n          overflowY: \"scroll\",\n        }}\n      >\n        Flow Left\n        <List disableGutters={true} dense component=\"nav\" aria-label=\"main mailbox folders\">\n          {actor.map((item) => (\n            <PathSettingsItem item={item} checked={checked} handleToggle={handleToggle} />\n          ))}\n        </List>\n        Flow Right\n        <List disableGutters={true} dense component=\"nav\" aria-label=\"main mailbox folders\">\n          {actor.map((item) => (\n            <PathSettingsItem item={item} checked={checkedRight} handleToggle={(id) => handleToggle(id, \"right\")} />\n          ))}\n        </List>\n      </div>\n    </>\n  );\n};\n\nexport const DashboardProps = () => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected_id = state.selected?.id;\n  const data = actions.get_data(selected_id);\n  const handleChange = (e, key) => {\n    actions.update_default_prop(selected_id, key, e.target.value);\n  };\n  const render_form = (data) => {\n    if (!data) {\n      return \"\";\n    }\n\n    return <TextField label=\"Name\" fullWidth value={data?.name} onChange={(e) => handleChange(e, \"name\")} />;\n  };\n\n  return (\n    <div onPointerDown={(e) => e.stopPropagation()}>\n      <div className=\"section_header\">Properties</div>\n      <div style={{ padding: 10 }}>\n        {render_form(data)}\n\n        <PropsEditor data={data} />\n        <PathSettings />\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n          {data?.x || \"0\"}px / {data?.y || \"0\"}px\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardLayer;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/DasboardToolbar.js",["341"],"import { Button, Paper } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { useContext } from \"react\";\nimport DeleteDialog from \"../util/DeleteDialog\";\nimport { DashboardContext } from \"./DashboardContext\";\n\nconst DashboardToolbar = () => {\n  const { actions, state } = useContext(DashboardContext);\n\n  return (\n    <Paper style={{ marginBottom: 5, padding: 5 }}>\n      <Button color=\"primary\" onClick={actions.save} variant=\"contained\" size=\"small\" startIcon={<SaveIcon />}>\n        Save\n      </Button>\n\n      <DeleteDialog\n        btnText=\"Clear\"\n        title=\"Clear Dashboard\"\n        message=\"Do you want to clear the Dashboard\"\n        callback={() => {\n          \n          actions.clear();\n        }}\n      />\n    </Paper>\n  );\n};\n\nexport default DashboardToolbar;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/KettleSelect.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/data/dashboardapi.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/CustomSVG.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Steps.js",["342","343","344"],"import { Button, List } from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport { default as React, useContext, useEffect, useState } from \"react\";\nimport { useCBPi } from \"../../data\";\nimport MashControl from \"../../util/MashControl\";\nimport { DashboardContext, useDraggable, useModel } from \"../DashboardContext\";\n\nconst StepProps = ({ config, data }) => {\n  if (!config) {\n    return <></>;\n  }\n\n  return config.map((e) => (\n    <div>\n      {e.label} {data[e.label]}\n    </div>\n  ));\n};\n\nfunction SimpleDialog(props) {\n  const { state } = useCBPi();\n  const { onClose, selectedValue, open, item } = props;\n  const [actions, setActions] = useState([]);\n  const [type, setType] = React.useState({});\n\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  useEffect(() => {\n    const t = state.stepTypes.find((e) => e.name === item.type);\n    setType(t, {});\n    setActions(t?.actions || []);\n  }, [state.stepTypes]);\n\n  return (\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogTitle id=\"simple-dialog-title\">Step Actions - {item.name}</DialogTitle>\n\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          <StepProps config={type.properties} data={item.props} />\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\" autoFocus>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nconst State = ({ state }) => {\n  switch (state) {\n    case \"I\":\n      return <RadioButtonUncheckedIcon />;\n    case \"A\":\n      return <CachedIcon color=\"primary\" />;\n    case \"E\":\n      return <ErrorIcon />;\n    case \"D\":\n      return <CheckCircleIcon color=\"primary\" />;\n    case \"P\":\n      return <PauseCircleOutlineIcon />;\n    default:\n      return \"\";\n  }\n};\n\nconst StepItem = ({ item }) => {\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(\"emails\");\n  const draggable = useDraggable();\n\n  const handleClickOpen = () => {\n    console.log(\"############\", draggable);\n    if (draggable) {\n      return;\n    }\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  return (\n    <>\n      <ListItem button={!draggable} onClick={handleClickOpen}>\n        <ListItemIcon>\n          <State state={item.status} />\n        </ListItemIcon>\n        <ListItemText primary={item.name} secondary={item.state_text} />\n      </ListItem>\n      <SimpleDialog item={item} selectedValue={selectedValue} open={open} onClose={handleClose} />\n    </>\n  );\n};\n\nexport const Steps = ({ id }) => {\n  const { state: state2, actions } = useContext(DashboardContext);\n\n  const model = useModel(id)\n  const { state } = useCBPi();\n  const [profile, setProfile] = useState([]);\n\n  useEffect(() => {\n    setProfile(state.mashProfile);\n  }, [state.mashProfile]);\n\n  let inputStyle = { color: \"#fff\", width: `${model?.props?.width}px`, fontSize: 12, backgroundColor: \"#2c282e\", padding: 5, borderRadius: 5 };\n\n  return (\n    <div className=\"box\" style={inputStyle}>\n      <div style={{ marign: 20 }}>\n        <div className=\"section_header\">{state.mashBasic?.name}</div>\n        <MashControl disabled={state2.draggable} />\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\n          {profile.map((row, index) => (\n            <StepItem item={row} key={index} />\n          ))}\n        </List>\n      </div>\n    </div>\n  );\n};\n\nexport default Steps;\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Led.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/KettleControl.js",["345"],"import { Slider } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport DriveEtaIcon from \"@material-ui/icons/DriveEta\";\nimport TrackChangesIcon from \"@material-ui/icons/TrackChanges\";\nimport WhatshotIcon from \"@material-ui/icons/Whatshot\";\nimport React, { useContext, useMemo } from \"react\";\nimport { useCBPi, useKettle } from \"../../data\";\nimport { useActor } from \"../../data/index\";\nimport { DashboardContext, useModel } from \"../DashboardContext\";\n\n\n\nconst TargetTempDialog = ({ onClose, kettle, open }) => {\n  const [value, setValue] = React.useState(30);\n\n  const {actions} = useCBPi()\n\n  if (!kettle) return \"\";\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleSet = () => {\n    actions.target_temp_kettle(kettle.id, value)\n    onClose();\n  };\n\n  \n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const marks = [\n    {\n      value: 0,\n      label: \"0°\",\n    },\n    {\n      value: 20,\n      label: \"20°\",\n    },\n    {\n      value: 37,\n      label: \"37°\",\n    },\n    {\n      value: 100,\n      label: \"100°\",\n    },\n  ];\n\n  return (\n    <Dialog fullWidth onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogTitle id=\"simple-dialog-title\">Set Target Temp {kettle.name} </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n            <Typography variant=\"h2\" component=\"h2\" gutterBottom>\n              {value}°\n            </Typography>\n          </div>\n          <Slider marks={marks} value={value} onChange={handleChange} aria-labelledby=\"continuous-slider\" />\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n            <Button variant=\"contained\" onClick={handleClose} color=\"secondary\" autoFocus>\n              Cancel\n            </Button>\n            <Button variant=\"contained\" onClick={handleSet} color=\"primary\" autoFocus\n              >\n              Set\n            </Button>\n          </div>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions></DialogActions>\n    </Dialog>\n  );\n};\n\nexport const KettleControl = ({ id }) => {\n  const { state } = useContext(DashboardContext);\n  const [open, setOpen] = React.useState(false);\n  const model = useModel(id);\n  const cbpi = useCBPi();\n  const kettle = useKettle(model.props?.kettle);\n  const heater = useActor(kettle?.heater);\n  const agitator = useActor(kettle?.agitator);\n  const toggle = (id) => {\n    cbpi.actions.toggle_actor(id);\n  };\n  const toggle_kettle_logic = (id) => {\n    cbpi.actions.toggle_logic(id);\n  };\n\n  return useMemo(() => {\n    const orientation = model?.props?.orientation === \"horizontal\" ? \"horizontal\" : \"vertical\";\n    return (\n      <>\n        <ButtonGroup disabled={state.draggable || !model.props.kettle} orientation={orientation} color=\"primary\" aria-label=\"contained primary button group\">\n          {heater ? <Button variant={heater?.state ? \"contained\" : \"\"} color=\"primary\" startIcon={<WhatshotIcon />} onClick={() => toggle(kettle?.heater)}></Button>: \"\"}\n          {agitator ? <Button variant={agitator?.state ? \"contained\" : \"\"} color=\"primary\" startIcon={<CachedIcon />} onClick={() => toggle(kettle?.agitator)}></Button> : \"\"}\n          {kettle?.type ? <Button variant={kettle?.state?.running ? \"contained\" : \"\"} color=\"primary\" startIcon={<DriveEtaIcon />} onClick={() => toggle_kettle_logic(kettle?.id)}></Button> : \"\"}\n          <Button variant=\"\" color=\"primary\" onClick={() => setOpen(true)} startIcon={<TrackChangesIcon />}></Button>\n        </ButtonGroup>\n        <TargetTempDialog open={open} kettle={kettle} onClose={() => setOpen(false)} />\n      </>\n    );\n  }, [state.draggable, kettle, model.props.orientation, agitator, heater, open]);\n};\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/TargetTemp.js",["346"],"\nimport React, { useContext } from \"react\";\nimport { useCBPi, useKettle } from \"../../data\";\nimport { DashboardContext } from \"../DashboardContext\";\n\nexport const TargetTemp = ({ id }) => {\n    const { actions } = useContext(DashboardContext);\n    const model = actions.get_data(id);\n    const kettle = useKettle(model.props?.kettle)\n    const css_style = { color: model?.props?.color || \"#fff\", fontSize: `${model?.props?.size}px` };\n    return <div style={css_style}> {kettle?.target_temp} {model?.props?.unit }</div>;\n  };","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Chart.js",["347"],"import { Paper } from \"@material-ui/core\";\nimport { useContext } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { DashboardContext } from \"../DashboardContext\";\n\nconst Chart = ({id}) => {\n    const { state, actions } = useContext(DashboardContext);\n\n    const model = actions.get_data(id);\n\n    return <Paper><Plot\n    data={[\n      {\n        x: [\"2021-10-04 21:23:00\", \"2021-10-04 22:23:00\", \"2021-10-04 23:23:00\"],\n        y: [1, 3, 6],\n        type: \"scatter\",\n      },\n      {\n        x: [\"2021-10-04 21:23:00\", \"2021-10-04 22:23:00\", \"2021-10-04 23:23:00\"],\n        y: [2, 2, 1],\n        type: \"scatter\",\n      },\n    ]}\n    config={{ displayModeBar: false }}\n    layout={{\n      paper_bgcolor: \"rgba(0,0,0,0)\",\n      plot_bgcolor: \"rgba(0,0,0,0)\",\n      width: model.props?.width || 200,\n      height: model.props?.height || 200,\n      margin: {\n        l: 10,\n        r: 5,\n        b: 10,\n        t: 5,\n        pad: 1,\n      },\n      legend: {\n        x: 1,\n        xanchor: 'right',\n        y: 1,\n        font: {\n          family: 'sans-serif',\n          size: 8,\n          color: '#fff'\n        },\n      },\n      xaxis: {\n        showgrid: false,\n        tickfont : {\n          size : 8,\n          color : '#fff'\n        }\n      },\n      yaxis: {\n        showgrid: true,\n        tickfont : {\n          size : 8,\n          color : '#fff'\n        }\n      }\n    }}\n  /></Paper>\n}\n\nexport default Chart","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/WidgetSelect.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/SensorData.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/SelectInput.js",["348","349","350","351","352","353"],"import { Grid, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport ActorSelect from \"./ActorSelect\";\nimport KettleSelect from \"./KettleSelect\";\nimport SensorSelect from \"./SensorSelect\";\n\nexport const SelectInput = ({ label, options=[], value, onChange }) => {\n    return (\n      <>\n        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n          {label}\n        </InputLabel>\n        <Select fullWidth labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={value} onChange={onChange}>\n        <MenuItem key=\"actor-non\" value=\"\">---</MenuItem>\n          {options.map((item) => (\n            <MenuItem key={item} value={item}>\n              {item}\n            </MenuItem>\n          ))}\n        </Select>\n      </>\n    );\n  };\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Button.js",["354"],"import Button from \"@material-ui/core/Button\";\nimport React, { useContext, useMemo } from \"react\";\nimport { useCBPi } from \"../../data\";\nimport { DashboardContext } from \"../DashboardContext\";\n\nexport const DashboardButton = ({ id, width, height }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const cbpi = useCBPi();\n\n  const model = actions.get_data(id);\n\n  return useMemo(() => {\n    const actor = cbpi.state.actors.find((e) => e.id === model.props?.actor);\n    let cssStyle = { width: model.width + \"px\", height: model.height + \"px\" };\n    let btnColor = actor?.state ? \"primary\" : \"primary\";\n    let btnVariant = actor?.state ? \"contained\" : \"outlined\";\n    const toggle = () => {\n      if (!state.draggable && model.props?.actor) {\n        cbpi.actions.toggle_actor(model.props?.actor);\n      }\n    };\n    const name = () => {\n      if (model.props?.actor && actor) {\n        return model.name;\n      } else {\n        return \"Missing Config\";\n      }\n    };\n    return (\n      <div style={cssStyle}>\n        <Button disabled={state.draggable} onClick={toggle} fullWidth variant={btnVariant} color={btnColor}>\n          {name()}\n        </Button>\n      </div>\n    );\n  });\n};\n","/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/SensorTypeSelect.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/util/ActorTypeSelect.js",[],"/Users/manuelfritsch/Documents/git/cbpi4-ui/cbpi4ui/src/components/dashboard/widgets/Text.js",[],{"ruleId":"355","replacedBy":"356"},{"ruleId":"357","replacedBy":"358"},{"ruleId":"359","severity":1,"message":"360","line":141,"column":19,"nodeType":"361","endLine":141,"endColumn":76},{"ruleId":"362","severity":1,"message":"363","line":37,"column":11,"nodeType":"364","messageId":"365","endLine":37,"endColumn":18},{"ruleId":"366","severity":1,"message":"367","line":44,"column":6,"nodeType":"368","endLine":44,"endColumn":8,"suggestions":"369"},{"ruleId":"362","severity":1,"message":"370","line":1,"column":25,"nodeType":"364","messageId":"365","endLine":1,"endColumn":36},{"ruleId":"362","severity":1,"message":"371","line":9,"column":5,"nodeType":"364","messageId":"365","endLine":9,"endColumn":16},{"ruleId":"362","severity":1,"message":"372","line":11,"column":7,"nodeType":"364","messageId":"365","endLine":11,"endColumn":19},{"ruleId":"362","severity":1,"message":"373","line":32,"column":19,"nodeType":"364","messageId":"365","endLine":32,"endColumn":29},{"ruleId":"362","severity":1,"message":"374","line":33,"column":16,"nodeType":"364","messageId":"365","endLine":33,"endColumn":23},{"ruleId":"362","severity":1,"message":"375","line":60,"column":9,"nodeType":"364","messageId":"365","endLine":60,"endColumn":32},{"ruleId":"366","severity":1,"message":"376","line":101,"column":6,"nodeType":"368","endLine":101,"endColumn":8,"suggestions":"377"},{"ruleId":"366","severity":1,"message":"378","line":160,"column":6,"nodeType":"368","endLine":160,"endColumn":15,"suggestions":"379"},{"ruleId":"366","severity":1,"message":"380","line":168,"column":6,"nodeType":"368","endLine":168,"endColumn":17,"suggestions":"381"},{"ruleId":"366","severity":1,"message":"382","line":168,"column":7,"nodeType":"383","endLine":168,"endColumn":16},{"ruleId":"366","severity":1,"message":"384","line":176,"column":6,"nodeType":"368","endLine":176,"endColumn":14,"suggestions":"385"},{"ruleId":"366","severity":1,"message":"384","line":184,"column":6,"nodeType":"368","endLine":184,"endColumn":13,"suggestions":"386"},{"ruleId":"366","severity":1,"message":"387","line":71,"column":6,"nodeType":"368","endLine":71,"endColumn":8,"suggestions":"388"},{"ruleId":"366","severity":1,"message":"389","line":71,"column":6,"nodeType":"368","endLine":71,"endColumn":8,"suggestions":"390"},{"ruleId":"366","severity":1,"message":"391","line":97,"column":6,"nodeType":"368","endLine":97,"endColumn":8,"suggestions":"392"},{"ruleId":"362","severity":1,"message":"393","line":14,"column":7,"nodeType":"364","messageId":"365","endLine":14,"endColumn":12},{"ruleId":"366","severity":1,"message":"394","line":129,"column":6,"nodeType":"368","endLine":129,"endColumn":8,"suggestions":"395"},{"ruleId":"362","severity":1,"message":"396","line":5,"column":8,"nodeType":"364","messageId":"365","endLine":5,"endColumn":12},{"ruleId":"362","severity":1,"message":"397","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":24},{"ruleId":"362","severity":1,"message":"398","line":2,"column":10,"nodeType":"364","messageId":"365","endLine":2,"endColumn":18},{"ruleId":"362","severity":1,"message":"399","line":3,"column":17,"nodeType":"364","messageId":"365","endLine":3,"endColumn":24},{"ruleId":"362","severity":1,"message":"400","line":1,"column":18,"nodeType":"364","messageId":"365","endLine":1,"endColumn":27},{"ruleId":"362","severity":1,"message":"401","line":1,"column":61,"nodeType":"364","messageId":"365","endLine":1,"endColumn":71},{"ruleId":"362","severity":1,"message":"402","line":8,"column":19,"nodeType":"364","messageId":"365","endLine":8,"endColumn":28},{"ruleId":"366","severity":1,"message":"403","line":59,"column":6,"nodeType":"368","endLine":59,"endColumn":8,"suggestions":"404"},{"ruleId":"405","severity":1,"message":"406","line":66,"column":35,"nodeType":"407","messageId":"408","endLine":66,"endColumn":37},{"ruleId":"362","severity":1,"message":"409","line":3,"column":8,"nodeType":"364","messageId":"365","endLine":3,"endColumn":13},{"ruleId":"362","severity":1,"message":"410","line":11,"column":17,"nodeType":"364","messageId":"365","endLine":11,"endColumn":27},{"ruleId":"362","severity":1,"message":"411","line":13,"column":10,"nodeType":"364","messageId":"365","endLine":13,"endColumn":21},{"ruleId":"362","severity":1,"message":"412","line":14,"column":10,"nodeType":"364","messageId":"365","endLine":14,"endColumn":19},{"ruleId":"362","severity":1,"message":"413","line":3,"column":8,"nodeType":"364","messageId":"365","endLine":3,"endColumn":12},{"ruleId":"362","severity":1,"message":"414","line":16,"column":8,"nodeType":"364","messageId":"365","endLine":16,"endColumn":19},{"ruleId":"366","severity":1,"message":"415","line":14,"column":6,"nodeType":"368","endLine":14,"endColumn":8,"suggestions":"416"},{"ruleId":"366","severity":1,"message":"417","line":48,"column":6,"nodeType":"368","endLine":48,"endColumn":25,"suggestions":"418"},{"ruleId":"366","severity":1,"message":"419","line":205,"column":6,"nodeType":"368","endLine":205,"endColumn":17,"suggestions":"420"},{"ruleId":"366","severity":1,"message":"384","line":259,"column":6,"nodeType":"368","endLine":259,"endColumn":24,"suggestions":"421"},{"ruleId":"366","severity":1,"message":"378","line":267,"column":6,"nodeType":"368","endLine":267,"endColumn":15,"suggestions":"422"},{"ruleId":"362","severity":1,"message":"423","line":6,"column":20,"nodeType":"364","messageId":"365","endLine":6,"endColumn":27},{"ruleId":"366","severity":1,"message":"424","line":35,"column":6,"nodeType":"368","endLine":35,"endColumn":21,"suggestions":"425"},{"ruleId":"362","severity":1,"message":"426","line":3,"column":39,"nodeType":"364","messageId":"365","endLine":3,"endColumn":46},{"ruleId":"359","severity":1,"message":"360","line":64,"column":43,"nodeType":"361","endLine":64,"endColumn":137},{"ruleId":"362","severity":1,"message":"427","line":6,"column":8,"nodeType":"364","messageId":"365","endLine":6,"endColumn":13},{"ruleId":"366","severity":1,"message":"428","line":36,"column":6,"nodeType":"368","endLine":36,"endColumn":13,"suggestions":"429"},{"ruleId":"362","severity":1,"message":"430","line":6,"column":8,"nodeType":"364","messageId":"365","endLine":6,"endColumn":22},{"ruleId":"366","severity":1,"message":"431","line":142,"column":6,"nodeType":"368","endLine":142,"endColumn":19,"suggestions":"432"},{"ruleId":"362","severity":1,"message":"433","line":8,"column":20,"nodeType":"364","messageId":"365","endLine":8,"endColumn":25},{"ruleId":"362","severity":1,"message":"423","line":35,"column":10,"nodeType":"364","messageId":"365","endLine":35,"endColumn":17},{"ruleId":"366","severity":1,"message":"434","line":46,"column":6,"nodeType":"368","endLine":46,"endColumn":23,"suggestions":"435"},{"ruleId":"362","severity":1,"message":"423","line":115,"column":26,"nodeType":"364","messageId":"365","endLine":115,"endColumn":33},{"ruleId":"366","severity":1,"message":"436","line":116,"column":6,"nodeType":"368","endLine":116,"endColumn":80,"suggestions":"437"},{"ruleId":"362","severity":1,"message":"438","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":17},{"ruleId":"362","severity":1,"message":"433","line":7,"column":13,"nodeType":"364","messageId":"365","endLine":7,"endColumn":18},{"ruleId":"362","severity":1,"message":"439","line":1,"column":10,"nodeType":"364","messageId":"365","endLine":1,"endColumn":14},{"ruleId":"362","severity":1,"message":"440","line":1,"column":46,"nodeType":"364","messageId":"365","endLine":1,"endColumn":55},{"ruleId":"362","severity":1,"message":"441","line":2,"column":10,"nodeType":"364","messageId":"365","endLine":2,"endColumn":19},{"ruleId":"362","severity":1,"message":"442","line":3,"column":8,"nodeType":"364","messageId":"365","endLine":3,"endColumn":19},{"ruleId":"362","severity":1,"message":"443","line":4,"column":8,"nodeType":"364","messageId":"365","endLine":4,"endColumn":20},{"ruleId":"362","severity":1,"message":"444","line":5,"column":8,"nodeType":"364","messageId":"365","endLine":5,"endColumn":20},{"ruleId":"366","severity":1,"message":"445","line":12,"column":10,"nodeType":"364","endLine":12,"endColumn":17},"no-native-reassign",["446"],"no-negated-in-lhs",["447"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'timerId' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'remove'. Either include it or remove the dependency array.","ArrayExpression",["448"],"'useCallback' is defined but never used.","'MQTTPattern' is assigned a value but never used.","'messageTypes' is assigned a value but never used.","'setPlugins' is assigned a value but never used.","'setTemp' is assigned a value but never used.","'processWebSocketMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'alert'. Either include it or remove the dependency array.",["449"],"React Hook useMemo has a missing dependency: 'actions'. Either include it or remove the dependency array.",["450"],"React Hook useMemo has missing dependencies: 'id' and 'sensor'. Either include them or remove the dependency array.",["451"],"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ObjectExpression","React Hook useMemo has a missing dependency: 'id'. Either include it or remove the dependency array.",["452"],["453"],"React Hook useEffect has missing dependencies: 'actor', 'id', and 'state.actorTypes'. Either include them or remove the dependency array.",["454"],"React Hook useEffect has missing dependencies: 'id', 'sensor', and 'state.sensorTypes'. Either include them or remove the dependency array.",["455"],"React Hook useEffect has missing dependencies: 'id', 'kettle', and 'state.logic'. Either include them or remove the dependency array.",["456"],"'props' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions', 'id', and 'state.stepTypes'. Either include them or remove the dependency array.",["457"],"'logo' is defined but never used.","'CircularProgress' is defined but never used.","'useAlert' is defined but never used.","'version' is defined but never used.","'Container' is defined but never used.","'InputLabel' is defined but never used.","'useConfig' is defined but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["458"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Paper' is defined but never used.","'useContext' is defined but never used.","'CBPiContext' is defined but never used.","'kettleapi' is defined but never used.","'Link' is defined but never used.","'ActorButton' is defined but never used.","React Hook useEffect has a missing dependency: 'state.mashBasic.name'. Either include it or remove the dependency array.",["459"],"React Hook useEffect has missing dependencies: 'elements', 'pathes', and 'selected'. Either include them or remove the dependency array.",["460"],"React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.",["461"],["462"],["463"],"'actions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'key'. Either include it or remove the dependency array.",["464"],"'useMemo' is defined but never used.","'Chart' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'state.pathes'. Either include them or remove the dependency array.",["465"],"'CropSquareIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'state.pathes'. Either include it or remove the dependency array.",["466"],"'state' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'item.type'. Either include it or remove the dependency array.",["467"],"React Hook useMemo has missing dependencies: 'model.props.kettle', 'toggle', and 'toggle_kettle_logic'. Either include them or remove the dependency array.",["468"],"'useCBPi' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'useEffect' is defined but never used.","'ActorSelect' is defined but never used.","'KettleSelect' is defined but never used.","'SensorSelect' is defined but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-global-assign","no-unsafe-negation",{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"473","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},"Update the dependencies array to be: [remove]",{"range":"510","text":"511"},"Update the dependencies array to be: [alert]",{"range":"512","text":"513"},"Update the dependencies array to be: [actions, state]",{"range":"514","text":"515"},"Update the dependencies array to be: [id, sensor]",{"range":"516","text":"517"},"Update the dependencies array to be: [id, kettle]",{"range":"518","text":"519"},"Update the dependencies array to be: [actor, id]",{"range":"520","text":"521"},"Update the dependencies array to be: [actor, id, state.actorTypes]",{"range":"522","text":"523"},"Update the dependencies array to be: [id, sensor, state.sensorTypes]",{"range":"524","text":"525"},"Update the dependencies array to be: [id, kettle, state.logic]",{"range":"526","text":"527"},"Update the dependencies array to be: [actions, id, state.stepTypes]",{"range":"528","text":"529"},"Update the dependencies array to be: [state]",{"range":"530","text":"531"},"Update the dependencies array to be: [state.mashBasic.name]",{"range":"532","text":"533"},"Update the dependencies array to be: [delelteKeyPressed, elements, pathes, selected]",{"range":"534","text":"535"},"Update the dependencies array to be: [actions, parentRef]",{"range":"536","text":"537"},"Update the dependencies array to be: [id, state.selected?.id]",{"range":"538","text":"539"},{"range":"540","text":"515"},"Update the dependencies array to be: [key, setKeyPressed]",{"range":"541","text":"542"},"Update the dependencies array to be: [actor, id, state.pathes]",{"range":"543","text":"544"},"Update the dependencies array to be: [selected_id, state.pathes]",{"range":"545","text":"546"},"Update the dependencies array to be: [item.type, state.stepTypes]",{"range":"547","text":"548"},"Update the dependencies array to be: [model.props?.orientation, model.props.kettle, state.draggable, heater, agitator, kettle, open, toggle, toggle_kettle_logic]",{"range":"549","text":"550"},[983,985],"[remove]",[3337,3339],"[alert]",[6176,6185],"[actions, state]",[6369,6380],"[id, sensor]",[6557,6565],"[id, kettle]",[6768,6775],"[actor, id]",[2030,2032],"[actor, id, state.actorTypes]",[2038,2040],"[id, sensor, state.sensorTypes]",[2664,2666],"[id, kettle, state.logic]",[3131,3133],"[actions, id, state.stepTypes]",[1858,1860],"[state]",[472,474],"[state.mashBasic.name]",[1854,1873],"[delelteKeyPressed, elements, pathes, selected]",[6031,6042],"[actions, parentRef]",[7766,7784],"[id, state.selected?.id]",[7975,7984],[1026,1041],"[key, setKeyPressed]",[1303,1310],"[actor, id, state.pathes]",[4967,4980],"[selected_id, state.pathes]",[1671,1688],"[item.type, state.stepTypes]",[4241,4315],"[model.props?.orientation, model.props.kettle, state.draggable, heater, agitator, kettle, open, toggle, toggle_kettle_logic]"]